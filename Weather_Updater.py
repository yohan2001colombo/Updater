# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y6vkPYDYb_ws4AonocFggXP8c2lnj7xY
"""

# !pip install openmeteo_requests
# !pip install requests_cache
# !pip install retry_requests

import openmeteo_requests

import pandas as pd
import requests_cache
from retry_requests import retry
from openmeteo_requests import Client
from datetime import datetime, timedelta

# Read districts from CSV
# CSV format: City,Latitude,Longitude
districts_df = pd.read_csv("latitude_longitude.csv")

# Setup Open-Meteo client with cache and retry
cache_session = requests_cache.CachedSession('.cache', expire_after=-1)
retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
openmeteo = Client(session=retry_session)

# Date range
end_date = (datetime.now() - timedelta(days=2)).strftime("%Y-%m-%d")
start_date = (datetime.now() - timedelta(days=3)).strftime("%Y-%m-%d")

# Prepare list to store results
all_data = []

for _, row in districts_df.iterrows():
    city = row["City"]
    lat = row["Latitude"]
    lon = row["Longitude"]
    print(f"Fetching weather for {city} ({lat}, {lon})...")

    params = {
        "latitude": lat,
        "longitude": lon,
        "start_date": start_date,
        "end_date": end_date,
        "daily": [
            "temperature_2m_mean",
            "wind_speed_10m_mean",
            "relative_humidity_2m_mean",
            "precipitation_sum"
        ],
        "timezone": "Asia/Colombo"
    }

    responses = openmeteo.weather_api("https://archive-api.open-meteo.com/v1/archive", params=params)
    response = responses[0]

    # Extract daily data
    daily = response.Daily()
    dates = pd.date_range(start=pd.to_datetime(daily.Time(), unit="s", utc=True)
                          .tz_convert("Asia/Colombo")
                          .date(),
                          periods=daily.Variables(0).ValuesLength(),
                          freq="D")

    df = pd.DataFrame({
        "date": dates,
        "temperature_2m_mean": daily.Variables(0).ValuesAsNumpy(),
        "wind_speed_10m_mean": daily.Variables(1).ValuesAsNumpy(),
        "relative_humidity_2m_mean": daily.Variables(2).ValuesAsNumpy(),
        "precipitation_sum": daily.Variables(3).ValuesAsNumpy(),
        "City": city
    })

    all_data.append(df)

weather_df = pd.concat(all_data, ignore_index=True)

all_districts = weather_df['City'].unique()
unique_dates = weather_df['date'].unique()

df_dates = pd.DataFrame(unique_dates, columns=['date'])
df_districts_list = pd.DataFrame(all_districts, columns=['City'])
df_complete_index = df_dates.merge(df_districts_list, how='cross')

df_update = pd.merge(df_complete_index, weather_df, on=['date', 'City'], how='left')

df_final = pd.read_csv("sri_lanka_weather_complete_index.csv")

# Ensure datetime type
df_final["date"] = pd.to_datetime(df_final["date"])
df_update["date"] = pd.to_datetime(df_update["date"])

# Use MultiIndex for unique alignment
df_final = df_final.set_index(["date", "City"])
df_update = df_update.set_index(["date", "City"])

# Combine: keeps all rows from both, updates where overlapping
df_merged = df_final.combine_first(df_update)

# Reset index back to columns
df_merged = df_merged.reset_index()

df_merged.to_csv("sri_lanka_weather_complete_index.csv", index=False)